
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."increment"("x" integer, "og_word" "text") RETURNS "void"
    LANGUAGE "sql"
    AS $$
  update word 
  set familiarity = familiarity + x
  where original_word = og_word
$$;

ALTER FUNCTION "public"."increment"("x" integer, "og_word" "text") OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."word" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "original_word" "text" NOT NULL,
    "translated_word" "text",
    "familiarity" bigint,
    "userid" "uuid"
);

ALTER TABLE "public"."word" OWNER TO "postgres";

ALTER TABLE "public"."word" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Word_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."random_word" WITH ("security_invoker"='on') AS
 SELECT "word"."original_word",
    "word"."translated_word"
   FROM "public"."word"
  WHERE ("word"."userid" = "auth"."uid"())
  ORDER BY ("random"());

ALTER TABLE "public"."random_word" OWNER TO "postgres";

ALTER TABLE ONLY "public"."word"
    ADD CONSTRAINT "Word_original_word_key" UNIQUE ("original_word");

ALTER TABLE ONLY "public"."word"
    ADD CONSTRAINT "Word_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."word"
    ADD CONSTRAINT "word_userid_fkey" FOREIGN KEY ("userid") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Enable insert for authenticated users only" ON "public"."word" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable update for users uid" ON "public"."word" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "userid"));

CREATE POLICY "Select word auth" ON "public"."word" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "userid"));

ALTER TABLE "public"."word" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."increment"("x" integer, "og_word" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."increment"("x" integer, "og_word" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."increment"("x" integer, "og_word" "text") TO "service_role";

GRANT ALL ON TABLE "public"."word" TO "anon";
GRANT ALL ON TABLE "public"."word" TO "authenticated";
GRANT ALL ON TABLE "public"."word" TO "service_role";

GRANT ALL ON SEQUENCE "public"."Word_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Word_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Word_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."random_word" TO "anon";
GRANT ALL ON TABLE "public"."random_word" TO "authenticated";
GRANT ALL ON TABLE "public"."random_word" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
